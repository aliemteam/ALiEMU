<?php

/**
 * Adds "Course Short Description" field to the block meta.
 * @param  mixed[][] $post   Posts
 * @return mixed[][]
 */
function learndash_course_grid_post_args($posts) {
    foreach($posts as $key => $post) {
		if($post["post_type"] !== "sfwd-courses") continue;

        $extraFields = [
            'course_short_description' => [
                'name' => 'Course Short Description',
                'type' => 'textarea',
                'help_text' => 'A short description of the course to show on course list generated by course list shortcode.',
            ],
            'recommendedHours' => [
                'name' => 'Recommended III Hours',
                'type' => 'text',
                'help_text' => 'The amount of hours that you recommend students claim for this course.',
            ],
        ];

        $posts[$key]["fields"] = $posts[$key]["fields"] + $extraFields;
	}
	return $posts;
}
add_filter("learndash_post_args", "learndash_course_grid_post_args", 10, 1);

/**
 * Add REST API support to learndash custom types / taxonomies
 */
add_action( 'init', 'adjust_post_types_for_rest', 25 );
function adjust_post_types_for_rest() {
    global $wp_post_types;
    global $wp_taxonomies;

    $post_types = ['sfwd-courses', 'sfwd-lessons', 'sfwd-quiz'];

    foreach ($post_types as $type_name) {
        if(isset( $wp_post_types[$type_name])) {
            $wp_post_types[$type_name]->show_in_rest = true;
        }
        if(isset($wp_taxonomies[$type_name])) {
            $wp_taxonomies[$type_name]->show_in_rest = true;
        }
    }
}

class AU_CSV {
    /** File object */
    private $csv;

    public static function init() {
        $self = new self();
        add_action('wp_ajax_export_csv', array($self, 'generate_csv'));
    }

    // Main function - dispatches other methods based on `csv_type` POST variable.
    public function generate_csv() {
        // Open a file stream using stdout (uses echo)
        $this->csv = fopen('php://output', 'w');

        switch($_POST['csv_type']) {
            case 'program_export':
                $this->program_export_csv();
                break;
            case 'user_export':
                $this->user_export_csv();
                break;
            case 'course_export':
                $this->course_export_csv();
                break;
            default:
                fclose($this->csv);
                return wp_send_json_error('Invalid or unspecified CSV type.');
        }
        // Close the file stream
        fclose($this->csv);

        // End the request
        wp_die();
    }

    private function program_export_csv() {
        global $wpdb;
        $group_id = $_POST['group_id'];
        $users = $_POST['users'];

        fputcsv($this->csv, [
            'Full Name',
            'Class of',
            'Total III Hours Awarded',
            'Courses In Progress',
            'Courses Completed',
        ]);

        foreach ($users as $user) {
            // Prepare query to guard against SQL injection attacks
            $query = $wpdb->prepare("
                SELECT activity_started
                FROM $wpdb->learndash_user_activity
                WHERE user_id = %d
                AND activity_type LIKE 'course'
            ", $user['id']);

            // Send query
            $courses_in_progress = $wpdb->get_results($query);

            // Filter out courses that aren't started
            $courses_in_progress = array_filter($courses_in_progress, function($v) {
                return $v->activity_started;
            });

            $row = [
                $user['name'],
                $user['meta']['graduationYear'],
                $user['meta']['totalHours'] ?? 0,
                count($courses_in_progress),
                count($user['meta']['completedCourses']),
            ];

            fputcsv($this->csv, $row);
        }
    }

    private function user_export_csv() {
        global $wpdb;
        $group_id = $_POST['group_id'];
        $user = $_POST['user'];

        // Prepare query to guard against SQL injection attacks
        $query = $wpdb->prepare("
            SELECT post_id, activity_id
            FROM $wpdb->learndash_user_activity
            WHERE user_id = %d
            AND activity_type = 'course'
            AND activity_status = 0
        ", $user['id']);

        // Send query -- Return an array
        $courses_in_progress = $wpdb->get_results($query, ARRAY_A);

        // Map an array of course IDs from the query response
        $course_ids = array_map(function($a) {
            return $a['post_id'];
        }, $courses_in_progress);

        fputcsv($this->csv, [
            'Registered Courses',
            'Steps Completed',
            'Date Completed',
            'Associated III Credit Hours',
            'Category',
        ]);

        // Parse info from all completed courses first
        foreach ($user['meta']['completedCourses'] as $course_id => $course) {
            // Prepare query to guard against SQL injection attacks
            $query = $wpdb->prepare("
                SELECT activity_meta_value
                FROM $wpdb->learndash_user_activity_meta
                WHERE activity_meta_key = 'steps_total'
                AND activity_id = (
                    SELECT activity_id
                    FROM $wpdb->learndash_user_activity
                    WHERE post_id = %d
                    AND user_id = %d
                )
            ", $course_id, $user['id']);

            // Send query -- Return an array with numeric indices
            $steps = $wpdb->get_results($query, ARRAY_N);

            $post = get_post($course_id);
            $row = [
                $post->post_title,
                "{$steps[0][0]} of {$steps[0][0]}",
                date_i18n( get_option('date_format'), (int) ($course[date] / 1000)),
                $course['hours'],
                wp_get_post_categories($course_id, ['fields' => 'names'])[0],
            ];
            fputcsv($this->csv, $row);
        }

        // Query and parse info for all courses not yet completed
        foreach ($courses_in_progress as $course) {
            // Prepare query to guard against SQL injection attacks
            $query = $wbdp->prepare("
                SELECT activity_meta_value
                FROM $wpdb->learndash_user_activity_meta
                WHERE activity_id = %d
                AND activity_meta_key != 'steps_last_id'
            ", $course['activity_id']);

            // Send query -- Return an array with numeric indices
            $steps = $wpdb->get_results($query, ARRAY_N);

            $post = get_post($course['post_id']);
            $row = [
                $post->post_title,
                "{$steps[1][0]} of {$steps[0][0]}",
                'N/A',
                'N/A',
                wp_get_post_categories($post->ID, ['fields' => 'names'])[0]
            ];
            fputcsv($this->csv, $row);
        }
    }

    private function course_export_csv() {
        global $wpdb;
        $group_id = $_POST['group_id'];
        $users = $_POST['users'];
        $courseId = $_POST['course'];

        $associated_content_ids = learndash_get_course_steps($courseId);

        fputcsv($this->csv, array_merge(
            ['Student Name', 'Course Completed'],
            array_map('get_the_title', $associated_content_ids)
        ));

        foreach ($users as $user) {
            $completed = $user['meta']['completedCourses'][$courseId];

            if (!empty($completed)) {
                $completed = date_i18n( get_option('date_format'), (int) ($completed['date'] / 1000));
            }
            else {
                $completed = 'N/A';
            }

            $row = [
                $user['name'],
                $completed,
            ];

            foreach ($associated_content_ids as $lesson_id) {
                $query = $wpdb->prepare("
                    SELECT activity_started, activity_completed
                    FROM $wpdb->learndash_user_activity
                    WHERE user_id = %d
                    AND post_id = %d
                ", $user['id'], $lesson_id);
                $status = $wpdb->get_results($query)[0];

                if (empty($status)) {
                    $row[] = 'X';
                }
                else if ($status->activity_started && !$status->activity_completed) {
                    $row[] = 'Started';
                }
                else {
                    $row[] = 'Completed';
                }
            }

            fputcsv($this->csv, $row);
        }
    }
}
AU_CSV::init();
