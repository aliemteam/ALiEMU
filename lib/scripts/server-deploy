#!/bin/bash

SCRIPTDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
ROOTDIR="$(cd $SCRIPTDIR && cd ../../ && pwd || exit)"

# shellcheck source=./helpers
source "$SCRIPTDIR/helpers" || exit 1

main() {

    # shellcheck source=../.env
    source $ROOTDIR/.env
    ssh_pass=${ssh_pass:-}
    token=${token:-}
    [[ ! $ssh_pass ]] && ERROR "Couldn't find 'ssh_pass' variable in .env file"
    [[ ! $token ]] && ERROR "Couldn't find 'token' variable in .env file"

    local droplets droplet

    # Initial dependency check
    depcheck \
        cat \
        docker \
        docker-machine \
        jq \
        rsync \
        ssh \
        ssh-add \
        ssh-keygen \
        ssh-keyscan \
        sshpass

    h2 'Gathering needed information...'
    read -p "$(h3 'Enter machine name:')" machine_name
    read -p "$(h3 'Enter site name + TLD:')" -ei "$machine_name.com" site_name
    while [ true ]; do
        read -p "$(h3 "Enter SSH/sudo password:")" -s sudo_pass && echo ""
        read -p "$(h3 "Reenter SSH/sudo password:")" -s sudo_pass_confirm && echo ""
        [[ $sudo_pass == "$sudo_pass_confirm" ]] && unset -v sudo_pass_confirm && break
    done

    h3 'Setting machine_name in local .env file'
    grep -q '^machine_name=' $ROOTDIR/.env && sed -i "s/^machine_name=.*/machine_name=$machine_name/" "$ROOTDIR/.env" \
        || sed -i "$ a\machine_name=$machine_name" "$ROOTDIR/.env"
    STATUS fatal 'Could not set machine_name in local .env file. Does the file exist?'

    h3 'Setting site_name in local .env file'
    grep -q '^site_name=' $ROOTDIR/.env && sed -i "s/^site_name=.*/site_name=$site_name/" "$ROOTDIR/.env" \
        || sed -i "$ a\site_name=$site_name" "$ROOTDIR/.env"
    STATUS fatal 'Could not set site_name in local .env file. Does the file exist?'


    h3 "Connecting to DigitalOcean"
    droplets=$(
        curl -s \
            -X GET \
            -H "Authorization: Bearer $token" \
            "https://api.digitalocean.com/v2/droplets" \
        | jq -r '.droplets | map_values(.name) | join(" ")' 2>/dev/null
    )
    STATUS fatal "Invalid access token"

    machine_exists=false
    for droplet in $droplets; do
        if [[ $droplet == "$machine_name" ]]; then
            machine_exists=true
            break
        fi
    done

    case $machine_exists in
        true)
            attach
            ;;
        false)
            init
            ;;
        *)
            ERROR "Something when wrong when checking if machine exists"
    esac

    exit 0
}


init() {

    local docker_compose_version
    docker_compose_version=$(curl -s -X GET "https://api.github.com/repos/docker/compose/releases/latest" | jq -r '.tag_name')

    h2 'Provisioning Docker Machine...'
    docker-machine create \
        -d digitalocean \
        --digitalocean-image=ubuntu-16-04-x64 \
        --digitalocean-access-token=$token \
        --digitalocean-region=nyc1 \
        $machine_name

    h2 'Setting up machine...'

    h2 'Updating kernel & installing dependencies'
    docker-machine ssh $machine_name "
    apt-get update \
    && apt-get upgrade -y \
    && DEBIAN_FRONTEND=noninteractive apt-get install -y \
        build-essential \
        vim
    "

    h3 'Installing Docker Compose'
    docker-machine ssh $machine_name "curl -sL https://github.com/docker/compose/releases/download/$docker_compose_version/docker-compose-Linux-x86_64 > /usr/local/bin/docker-compose \
    && chmod +x /usr/local/bin/docker-compose
    "
    STATUS

    h3 'Installing NodeJS'
    docker-machine ssh $machine_name "
    curl -sL https://deb.nodesource.com/setup_6.x -o nodesource_setup.sh \
    && chmod +x nodesource_setup.sh \
    && ./nodesource_setup.sh &>/dev/null \
    && DEBIAN_FRONTEND=noninteractive && apt-get install -y nodejs &>/dev/null \
    && npm i -g uglify-js csso &>/dev/null
    "
    STATUS

    h3 'Initializing filesystem & setting root access password'
    docker-machine ssh $machine_name "
    mkdir -p /app
    chown -R :www-data /app
    chmod -R g+rwx /app
    echo 'root:$ssh_pass' | chpasswd
    "
    STATUS

    h3 "Creating user '$USER' with sudo priveledges"
    docker-machine ssh $machine_name "
    adduser $USER --gecos '$USER,,,' --disabled-password &>/dev/null
    usermod -aG www-data,docker $USER
    echo '$USER:$sudo_pass' | chpasswd
    sed -i 's/root\tALL=(ALL:ALL) ALL/root\tALL=(ALL:ALL) ALL\n$USER\tALL=(ALL:ALL) ALL/' /etc/sudoers
    "
    STATUS

    h3 'Setting up SSH'
    mkdir -p $HOME/.ssh
    rm -f "$HOME/.ssh/DO_${machine_name}_rsa" "$HOME/.ssh/DO_${machine_name}_rsa.pub"
    ssh-keygen -t rsa -N "" -f "$HOME/.ssh/DO_${machine_name}_rsa" &>/dev/null
    cat "$HOME/.ssh/DO_${machine_name}_rsa.pub" | docker-machine ssh $machine_name "
    sudo -u $USER mkdir -p /home/$USER/.ssh && cat >> /home/$USER/.ssh/authorized_keys
    chown -R $USER:$USER /home/$USER
    chmod 700 /home/$USER/.ssh
    chmod 600 /home/$USER/.ssh/authorized_keys
    "
    STATUS

    h2 'Copying files from local directory to machine'

    eval "$(ssh-agent -s)" &>/dev/null
    ssh-add "$HOME/.ssh/DO_${machine_name}_rsa" &>/dev/null

    if [ -z "$(ssh-keygen -F "$(docker-machine ip $machine_name)")" ]; then
      ssh-keyscan -H "$(docker-machine ip $machine_name)" >> ~/.ssh/known_hosts
    fi

    rsync --info=progress2 -aOz --chown=$USER:www-data --no-p -e "ssh -i ~/.ssh/DO_${machine_name}_rsa" \
        --include="docker-compose*" \
        --include=".env" \
        --include="dist/***" \
        --include="wp-content/***" \
        --include="data/***" \
        --include="lib" \
        --include="lib/compose.yml" \
        --include="lib/scripts" \
        --include="lib/scripts/minify" \
        --exclude="*" \
    "$ROOTDIR/" "$(docker-machine ip $machine_name):/app"

    h3 'Creating package.json'
    docker-machine ssh $machine_name "echo '{\"scripts\": {\"minify\": \"./lib/scripts/minify\"}}' > /app/package.json"
    STATUS

    h2 'Finalizing transfer'

    h3 'Adjusting file ownership of /app directory'
    docker-machine ssh $machine_name "
    chown -R www-data:www-data /app
    chmod -R g+rwx /app
    "
    STATUS

    h2 "Associating domain name '$site_name' with droplet"

    existing_domain=$(curl -s \
    -X GET \
    -H "Authorization: Bearer $token" \
    "https://api.digitalocean.com/v2/domains/$site_name" \
    | jq -r '.domain')

    if [[ $existing_domain != 'null' ]]; then
        # domain exists
        update_domain_records "$(docker-machine ip $machine_name)"
    else
        # domain does not exist
        create_domain_records "$(docker-machine ip $machine_name)"
    fi

    h2 'Server Deployment Finished. Rebooting...'
    docker-machine restart $machine_name

    h2 'Deploying site'
    docker-machine ssh $machine_name "
    cd /app
    docker-compose -f docker-compose.prod.yml up -d
    "

}

attach() {

    local droplet_ip

    h2 "Found existing droplet named '$machine_name'"
    droplet_ip=$(
        curl -s \
            -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $token" \
            "https://api.digitalocean.com/v2/droplets" \
        | jq -r '.droplets | map(select(.name == "'$machine_name'")) | map(.networks.v4[].ip_address) | .[0]'
    )
    [[ $droplet_ip == 'null' ]] && ERROR "Could not determine droplet IP for $machine_name"

    if [ -z "$(ssh-keygen -F $droplet_ip)" ]; then
      ssh-keyscan -H $droplet_ip >> ~/.ssh/known_hosts
    fi

    h3 'Setting up root-level SSH for Docker Machine'
    mkdir -p $HOME/.ssh
    rm -f "$HOME/.ssh/DO_${machine_name}_rsa" "$HOME/.ssh/DO_${machine_name}_rsa.pub"
    ssh-keygen -t rsa -N "" -f "$HOME/.ssh/DO_${machine_name}_rsa" &>/dev/null
    cat "$HOME/.ssh/DO_${machine_name}_rsa.pub" | sshpass -p $ssh_pass ssh root@$droplet_ip "
    cat >> /root/.ssh/authorized_keys
    chmod 700 /root/.ssh
    chmod 600 /root/.ssh/authorized_keys
    "
    STATUS

    h2 'Provisioning Docker Machine with Generic driver...'
    docker-machine create \
        -d generic \
        --generic-ip-address=$droplet_ip \
        --generic-ssh-key "$HOME/.ssh/DO_${machine_name}_rsa" \
        $machine_name

    h2 "Setting up machine for $USER..."

    h3 "Creating user '$USER' with sudo priveledges"
    docker-machine ssh $machine_name "
    adduser $USER --gecos '$USER,,,' --disabled-password &>/dev/null
    usermod -aG www-data,docker $USER
    echo '$USER:$sudo_pass' | chpasswd
    sed -i 's/root\tALL=(ALL:ALL) ALL/root\tALL=(ALL:ALL) ALL\n$USER\tALL=(ALL:ALL) ALL/' /etc/sudoers
    "
    STATUS

    h3 'Setting up SSH'
    cat "$HOME/.ssh/DO_${machine_name}_rsa.pub" | docker-machine ssh $machine_name "
    sudo -u $USER mkdir -p /home/$USER/.ssh && cat >> /home/$USER/.ssh/authorized_keys
    chown -R $USER:$USER /home/$USER
    chmod 700 /home/$USER/.ssh
    chmod 600 /home/$USER/.ssh/authorized_keys
    "
    STATUS

    # FIXME: Not sure why I added this in here to begin with
    # h2 'Restarting Docker Compose services'
    # docker-machine ssh $machine_name "cd /app && docker-compose restart"

    h2 "Server attachment finished"

}

update_domain_records() {
    local droplet_ip=${1?'IP address must be passed into this function'}
    local records

    h3 "Domain found. Retrieving list of 'A' records from DigitalOcean"
    records=$(curl -s \
        -X GET \
        -H "Authorization: Bearer $token" \
        "https://api.digitalocean.com/v2/domains/$site_name/records" \
        | jq -r '.domain_records | map(select(.type == "A")) | map_values(.id | tostring) | join(" ")'
    )
    STATUS

    for id in $records; do
        h3 "Updating IP for record id $id"
        curl -s \
            -X PUT \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $token" \
            -d "{\"data\":\"$droplet_ip\"}" "https://api.digitalocean.com/v2/domains/$site_name/records/$id" \
            &>/dev/null
        STATUS
    done;
}

create_domain_records() {
    local droplet_ip=${1?'IP address must be passed into this function'}

    h3 'Existing domain record not found. Creating new record'
    curl \
        -X POST \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $token" \
        -d "{\"name\":\"$site_name\",\"ip_address\":\"$droplet_ip\"}" \
        "https://api.digitalocean.com/v2/domains" &>/dev/null
    STATUS

    h3 "Creating 'A' record for www"
    curl \
        -X POST \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $token" \
        -d "{\"type\":\"A\",\"name\":\"www\",\"data\":\"$droplet_ip\",\"priority\":null,\"port\":null,\"weight\":null}" \
        "https://api.digitalocean.com/v2/domains/$site_name/records" &>/dev/null
    STATUS
}

main
