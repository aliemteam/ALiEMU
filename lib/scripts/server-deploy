#!/bin/bash

SCRIPTDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
ROOTDIR=$(cd $SCRIPTDIR && cd ../../ && pwd || exit)

# shellcheck source=./helpers
source "$SCRIPTDIR/helpers" || exit 1

main() {

    # shellcheck source=../.env
    source $ROOTDIR/.env
    [[ ! $SSHPASS ]] && ERROR "Couldn't find 'SSHPASS' variable in .env file"
    [[ ! $TOKEN ]] && ERROR "Couldn't find 'TOKEN' variable in .env file"

    local droplets droplet

    # Initial dependency check
    depcheck \
        cat \
        docker \
        docker-machine \
        jq \
        rsync \
        ssh \
        ssh-add \
        ssh-keygen \
        ssh-keyscan \
        sshpass

    h2 'Gathering needed information...'
    read -p "$(h3 "Enter machine name:")" machine_name
    read -p "$(h3 "Enter SSH/sudo password:")" -s sudo_pass && echo ""

    droplets=$(
        curl -s \
            -X GET \
            -H "Authorization: Bearer $TOKEN" \
            "https://api.digitalocean.com/v2/droplets" \
        | jq -r '.droplets | map_values(.name) | join(" ")' 2>/dev/null
    )
    STATUS fatal "Invalid access token"

    machine_exists=false
    for droplet in $droplets; do
        if [[ $droplet == "$machine_name" ]]; then
            machine_exists=true
            break
        fi
    done

    case $machine_exists in
        true)
            attach
            ;;
        false)
            init
            ;;
        *)
            ERROR "Something when wrong when checking if machine exists"
    esac

    exit 0
}


init() {

    local docker_compose_version

    docker_compose_version=$(git ls-remote https://github.com/docker/compose | tail -n8 | awk '{print $2}' | grep -Po 'refs/tags/\K([\d.]{5})(?!-\w+)' | tail -n1)

    h2 'Provisioning Docker Machine...'
    docker-machine create \
        -d digitalocean \
        --digitalocean-access-token=$TOKEN \
        $machine_name

    h2 'Setting up machine...'

    h3 "Attaching to machine '$machine_name'"
    eval "$(docker-machine env $machine_name)"
    STATUS

    h2 'Updating kernel & installing dependencies on host machine'
    docker-machine ssh $machine_name "
    apt-get update && \
    apt-get upgrade -y && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y vim &&
    docker_compose_version=$(git ls-remote https://github.com/docker/compose | tail -n8 | awk '{print $2}' | grep -Po 'refs/tags/\K([\d.]{5})(?!-\w+)' | tail -n1) &&
    curl -L https://github.com/docker/compose/releases/download/$docker_compose_version/docker-compose-Linux-x86_64 > /usr/local/bin/docker-compose && \
    chmod +x /usr/local/bin/docker-compose
    "

    h3 'Initializing filesystem & setting root access password'
    docker-machine ssh $machine_name "
    mkdir -p /app
    chown -R :www-data /app
    chmod -R g+rwx /app
    echo 'root:$SSHPASS' | chpasswd
    "
    STATUS

    h3 "Creating user '$USER' with sudo priveledges"
    docker-machine ssh $machine_name "
    adduser $USER --gecos '$USER,,,' --disabled-password &>/dev/null
    usermod -aG www-data,docker $USER
    echo '$USER:$sudo_pass' | chpasswd
    sed -i 's/root\tALL=(ALL:ALL) ALL/root\tALL=(ALL:ALL) ALL\n$USER\tALL=(ALL:ALL) ALL/' /etc/sudoers
    "
    STATUS

    h3 'Setting up SSH'
    mkdir -p $HOME/.ssh
    rm -f "$HOME/.ssh/DO_${machine_name}_rsa" "$HOME/.ssh/DO_${machine_name}_rsa.pub"
    ssh-keygen -t rsa -N "" -f "$HOME/.ssh/DO_${machine_name}_rsa" &>/dev/null
    cat "$HOME/.ssh/DO_${machine_name}_rsa.pub" | docker-machine ssh $machine_name "
    sudo -u $USER mkdir -p /home/$USER/.ssh && cat >> /home/$USER/.ssh/authorized_keys
    chown -R $USER:$USER /home/$USER
    chmod 700 /home/$USER/.ssh
    chmod 600 /home/$USER/.ssh/authorized_keys
    "
    STATUS

    h2 'Copying files from local directory to machine'

    eval "$(ssh-agent -s)" &>/dev/null
    ssh-add "$HOME/.ssh/DO_${machine_name}_rsa" &>/dev/null

    if [ -z "$(ssh-keygen -F "$(docker-machine ip $machine_name)")" ]; then
      ssh-keyscan -H "$(docker-machine ip $machine_name)" >> ~/.ssh/known_hosts
    fi

    rsync --info=progress2 -aOz --chown=$USER:www-data --no-p -e "ssh -i ~/.ssh/DO_${machine_name}_rsa" \
        --include="docker-compose*" \
        --include=".env" \
        --include="dist/***" \
        --include="wp-content/***" \
        --include="data/***" \
        --include="lib" \
        --include="lib/compose.yml" \
        --exclude="*" \
    "$ROOTDIR/" "$(docker-machine ip $machine_name):/app"

    h2 'Finalizing transfer'
    h3 'Adjusting file ownership of /app directory'
    docker-machine ssh $machine_name "
    chown -R www-data:www-data /app
    chmod -R g+rwx /app
    "
    STATUS

    h2 "Server Deployment Finished"
}

attach() {

    local droplet_ip

    h2 "Found existing droplet named '$machine_name'"
    droplet_ip=$(
        curl -s \
            -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TOKEN" \
            "https://api.digitalocean.com/v2/droplets" \
        | jq -r '.droplets | map(select(.name == "'$machine_name'")) | map(.networks.v4[].ip_address) | .[0]'
    )
    [[ $droplet_ip == 'null' ]] && ERROR "Could not determine droplet IP for $machine_name"

    if [ -z "$(ssh-keygen -F $droplet_ip)" ]; then
      ssh-keyscan -H $droplet_ip >> ~/.ssh/known_hosts
    fi

    h3 'Setting up root-level SSH for Docker Machine'
    mkdir -p $HOME/.ssh
    rm -f "$HOME/.ssh/DO_${machine_name}_rsa" "$HOME/.ssh/DO_${machine_name}_rsa.pub"
    ssh-keygen -t rsa -N "" -f "$HOME/.ssh/DO_${machine_name}_rsa" &>/dev/null
    cat "$HOME/.ssh/DO_${machine_name}_rsa.pub" | sshpass -p $SSHPASS ssh root@$droplet_ip "
    cat >> /root/.ssh/authorized_keys
    chmod 700 /root/.ssh
    chmod 600 /root/.ssh/authorized_keys
    "
    STATUS

    h2 'Provisioning Docker Machine with Generic driver...'
    docker-machine create \
        -d generic \
        --generic-ip-address=$droplet_ip \
        --generic-ssh-key "$HOME/.ssh/DO_${machine_name}_rsa" \
        $machine_name

    h2 "Setting up machine for $USER..."

    h3 "Attaching to machine '$machine_name'"
    eval "$(docker-machine env $machine_name)"
    STATUS

    h3 "Creating user '$USER' with sudo priveledges"
    docker-machine ssh $machine_name "
    adduser $USER --gecos '$USER,,,' --disabled-password &>/dev/null
    usermod -aG www-data,docker $USER
    echo '$USER:$sudo_pass' | chpasswd
    sed -i 's/root\tALL=(ALL:ALL) ALL/root\tALL=(ALL:ALL) ALL\n$USER\tALL=(ALL:ALL) ALL/' /etc/sudoers
    "
    STATUS

    h3 'Setting up SSH'
    cat "$HOME/.ssh/DO_${machine_name}_rsa.pub" | docker-machine ssh $machine_name "
    sudo -u $USER mkdir -p /home/$USER/.ssh && cat >> /home/$USER/.ssh/authorized_keys
    chown -R $USER:$USER /home/$USER
    chmod 700 /home/$USER/.ssh
    chmod 600 /home/$USER/.ssh/authorized_keys
    "
    STATUS

    h2 'Restarting Docker Compose services'
    docker-machine ssh $machine_name "cd /app && docker-compose restart"

    h2 "Server attachment finished"

}

main
